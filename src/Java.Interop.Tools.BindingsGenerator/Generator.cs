using Javil;
using Xamarin.SourceWriter;

namespace Java.Interop.Tools.BindingsGenerator;

public class Generator
{
	public GeneratorSettings Settings { get; }

	public Generator (GeneratorSettings settings)
	{
		Settings = settings;
	}

	public void Generate ()
	{
		if (!Settings.InputFile.HasValue ())
			throw new InvalidOperationException ("No InputFile specified.");

		// Read the input file
		ContainerDefinition container;

		using (Settings.LogTiming ($"Parse file: {Settings.InputFile}"))
			container = ContainerDefinition.ReadContainer (Settings.InputFile);

		List<TypeWriter> model;

		// Generate the binding
		using (Settings.LogTiming ("Generate binding")) {
			RunJavaFixups (container);

			var binder = new DefaultModelBinder (Settings);
			model = binder.CreateModel (container);

			RunManagedFixups (model);
		}

		// Write the results
		using (Settings.LogTiming ("Output binding")) {
			Directory.CreateDirectory (Settings.OutputDirectory);

			foreach (var type in model) {
				using var writer = new CodeWriter (Path.Combine (Settings.OutputDirectory, type.Namespace + "." + type.Name + ".cs"));

				writer.WriteAutoGeneratedHeader ();

				writer.WriteLine ($"namespace {type.Namespace};");
				writer.WriteLine ();
				type.Write (writer);
			}
		}
	}

	// These are the fixups that are run against the Java model
	void RunJavaFixups (ContainerDefinition container)
	{
		MicrosoftAndroidFixups.ApplyContainerFixups (container);
		JavaBaseFixups.ApplyContainerFixups (container);
		TypeVisibilityFixup.Run (container);
		TypeMemberNameCollisionFixups.Run (container, Settings);
		ShadowedInterfaceMethods.Run (container, Settings);  // Needs to run before ImplementedInterfaceFixup
		ImplementedInterfaceFixup.Run (container, Settings);
		DefaultInterfaceImplementationFixup.Run (container);
		ProtectedBaseMethodFixup.Run (container, Settings);
	}

	void RunManagedFixups (List<TypeWriter> model)
	{
		MicrosoftAndroidFixups.ApplyTypeFixups (model);
		JavaBaseFixups.ApplyTypeFixups (model);
		//TypeMemberNameCollisionFixups.ApplyTypeFixups (model, Settings);
	}
}
